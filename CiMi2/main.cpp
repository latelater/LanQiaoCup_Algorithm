
//问题描述
//　　任何一个正整数都可以用2进制表示，例如：137的2进制表示为10001001。
//　　将这种2进制表示写成2的次幂的和的形式，令次幂高的排在前面，可得到如下表达式：137=2^7+2^3+2^0
//　　现在约定幂次用括号来表示，即a^b表示为a（b）
//　　此时，137可表示为：2（7）+2（3）+2（0）
//　　进一步：7=2^2+2+2^0 （2^1用2 表示）
//　　3=2+2^0
//　　所以最后137可表示为：2（2（2）+2+2（0））+2（2+2（0））+2（0）
//　　又如：1315=2^10+2^8+2^5+2+1
//　　所以1315最后可表示为：
//　　2（2（2+2（0））+2）+2（2（2+2（0）））+2（2（2）+2（0））+2+2（0）
//输入格式
//　　正整数（1<=n<=20000）
//输出格式
//　　符合约定的n的0，2表示（在表示中不能有空格）
//样例输入
//137
//样例输出
//2(2(2)+2+2(0))+2(2+2(0))+2(0)
//样例输入
//1315
//样例输出
//2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)
//提示
//　　用递归实现会比较简单，可以一边递归一边输出

//
//
//#include <iostream>
//
//using namespace std;
//
//int ErJinZhi(int n){
//    int *x = new int[200000];
//    int i = 0;
//    while(n > 0){
//        x[i] = n%2;
//        n = n/2;
//        i++;
//    }
//
//
//    delete []x;
//}
//
//int main()
//{
//    int n;
//    cin >> n;
//    cout << "Hello world!" << endl;
//    return 0;
//}


#include<iostream>

using namespace std;

void pots(int n)
{
    int a[100];
    int num=0,c=0,m;

    //十进制转二进制
    while(n)
    {
        m=n%2;
        if(m!=0)
        {
            a[num++]=c;
        }
        c++;
        n/=2;
//        cout << a[num] << " ";
    }

    for(int j = 0; j < num; j++){
        cout << a[j] << " ";
    }
//    cout << endl;

    //输出
    for(int i=num-1;i>=0;i--)
    {
        if(a[i]==0)
            cout<<"2(0)";
        else if(a[i]==1)
            cout<<"2";
        else if(a[i]==2)
            cout<<"2(2)";
        else if(a[i]>2)
        {
            cout<<"2(";
            pots(a[i]);
            cout<<")";
        }
        if(i!=0)
            cout<<"+";
    }
}
int main()
{
    int n;
    cin>>n;
    pots(n);

    return 0;
}
